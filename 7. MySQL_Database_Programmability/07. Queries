#Lab
#1
DELIMITER $$
CREATE FUNCTION `ufn_count_employees_by_town`(town_name VARCHAR (50)) 
RETURNS int
    DETERMINISTIC
BEGIN

DECLARE e_count INT;
SET e_count := 
				(SELECT COUNT(*) 
				FROM employees AS e
				JOIN addresses AS a
				ON e.address_id = a.address_id
				JOIN towns AS t
				ON a.town_id = t.town_id
				WHERE t.name = town_name);

RETURN e_count;
END $$

DELIMITER ;

SELECT ufn_count_employees_by_town('Seattle');

#2
DELIMITER $$
CREATE PROCEDURE `usp_raise_salaries` (department_name VARCHAR(50))
BEGIN

UPDATE employees AS e
JOIN departments AS d
ON e.department_id = d.department_id
SET e.salary = e.salary * 1.05
WHERE d.name  = department_name;

END$$

DELIMITER ;

CALL usp_raise_salaries(department_name);

#3
DELIMITER $$
CREATE PROCEDURE usp_raise_salary_by_id(id int)
BEGIN
	START TRANSACTION;
	IF((SELECT count(employee_id) FROM employees WHERE employee_id like id) <> 1) 
        THEN ROLLBACK;
	ELSE
		UPDATE employees AS e 
        SET salary = salary + salary * 0.05 
		WHERE e.employee_id = id;
	END IF; 
END
$$

DELIMITER ;

CALL usp_raise_salary_by_id(17);

#4
CREATE TABLE deleted_employees(
	employee_id INT PRIMARY KEY AUTO_INCREMENT,
	first_name VARCHAR(20),
	last_name VARCHAR(20),
	middle_name VARCHAR(20),
	job_title VARCHAR(50),
	department_id INT,
	salary DOUBLE 
);

DELIMITER $$
CREATE TRIGGER tr_deleted_employees
AFTER DELETE
ON employees
FOR EACH ROW
BEGIN
	INSERT INTO deleted_employees (first_name, last_name, middle_name, job_title, department_id,salary)
	VALUES(OLD.first_name, OLD.last_name, OLD.middle_name, OLD.job_title, OLD.department_id, OLD.salary);
END
$$
DELIMITER ;


#Exercises
#1
DELIMITER $$
CREATE PROCEDURE `usp_get_employees_salary_above_35000` ()
BEGIN

SELECT e.first_name, e.last_name 
FROM employees AS e
WHERE e.salary > 35000
ORDER BY e.first_name, e.last_name, e.employee_id;

END$$
DELIMITER ;

CALL usp_get_employees_salary_above_35000;

#2
DELIMITER $$
CREATE PROCEDURE `usp_get_employees_salary_above` (`number` DECIMAL(19,4))
BEGIN

SELECT e.first_name, e.last_name 
FROM employees AS e
WHERE e.salary >= `number`
ORDER BY e.first_name, e.last_name, e.employee_id;

END$$
DELIMITER ;

CALL usp_get_employees_salary_above(45000);

#3
DELIMITER $$
CREATE PROCEDURE `usp_get_towns_starting_with` (param VARCHAR (45))
BEGIN

SELECT `name`
FROM `towns` AS t
WHERE LOWER(t.name) LIKE CONCAT(`param`, '%')
ORDER BY t.`name`;

END$$
DELIMITER ;

CALL usp_get_towns_starting_with ('b');

#4
DELIMITER $$
CREATE PROCEDURE `usp_get_employees_from_town` (`town_name` VARCHAR(45))
BEGIN

SELECT e.first_name, e.last_name 
FROM employees AS e
JOIN addresses AS a
ON e.address_id = a.address_id
JOIN towns AS t
ON a.town_id = t.town_id
WHERE t.`name` = `town_name`
ORDER BY e.first_name, e.last_name, e.employee_id;

END$$
DELIMITER ;

CALL usp_get_employees_from_town('Sofia');

#5
DELIMITER $$
CREATE FUNCTION `ufn_get_salary_level`(`e_salary` DECIMAL(19,4))
RETURNS VARCHAR(45)
DETERMINISTIC
BEGIN
		RETURN
        (CASE 
				WHEN e_salary < 30000 THEN 'Low'
				WHEN e_salary BETWEEN 30000 AND 50000 THEN 'Average'
				WHEN e_salary > 50000 THEN 'High'
		END);
END$$
DELIMITER ;

SELECT ufn_get_salary_level (38897);

#6
DELIMITER $$
CREATE PROCEDURE `usp_get_employees_by_salary_level`(`level_of_salary` VARCHAR(45))
BEGIN

SELECT e.first_name, e.last_name 
FROM employees AS e
WHERE `level_of_salary` = `ufn_get_salary_level`(e.salary)
ORDER BY e.first_name DESC, e.last_name DESC;

END $$
DELIMITER ;

CALL `usp_get_employees_by_salary_level`('High');

#7
DELIMITER //
CREATE FUNCTION `ufn_is_word_comprised`(`set_of_letters` VARCHAR(50), `word` VARCHAR(50))
RETURNS BIT
DETERMINISTIC
BEGIN
RETURN `word` REGEXP (CONCAT('^[', set_of_letters, ']+$'));
END //
DELIMITER ;

SELECT ufn_is_word_comprised('pppp', 'uy');

#8
DELIMITER $$
CREATE PROCEDURE `usp_get_holders_full_name`()
BEGIN

SELECT concat_ws(' ', ah.first_name, ah.last_name) AS 'full_name'
FROM account_holders AS ah
ORDER BY `full_name`, ah.id;

END$$
DELIMITER ;

CALL usp_get_holders_full_name();

#9
DELIMITER $$
CREATE PROCEDURE `usp_get_holders_with_balance_higher_than`(param DECIMAL(19,4))
BEGIN

SELECT ah.first_name, ah.last_name
FROM account_holders AS ah
JOIN accounts AS a
ON ah.id = a.account_holder_id
GROUP BY a.account_holder_id
HAVING SUM(a.balance) > param
ORDER BY a.account_holder_id;

END$$
DELIMITER ;

CALL usp_get_holders_with_balance_higher_than(7000);

#10
DELIMITER $$
CREATE FUNCTION `ufn_calculate_future_value`(sum DECIMAL(19,4), interest_rate DOUBLE, years INT)
RETURNS DECIMAL(19,4)
DETERMINISTIC
BEGIN
RETURN sum * (pow((1+interest_rate), years));
END $$
DELIMITER ;

SELECT ufn_calculate_future_value (1000,0.5, 5);

#11
DELIMITER $$
CREATE PROCEDURE `usp_calculate_future_value_for_account`(id INT, interest DECIMAL(19,4))
BEGIN

SELECT a.id AS 'account_id', ah.first_name, ah.last_name, a.balance AS 'current_balance', 
ufn_calculate_future_value(a.balance, interest, 5) AS 'balance_in_5_years'
FROM account_holders AS ah
JOIN accounts AS a
ON ah.id = a.account_holder_id
WHERE a.id = id;

END$$
DELIMITER ;

CALL usp_calculate_future_value_for_account(1, 0.1);

#12
DELIMITER $$
CREATE PROCEDURE `usp_deposit_money`(account_id INT, money_amount DECIMAL(19,4))
BEGIN
	IF (SELECT COUNT(*) FROM accounts AS a WHERE a.id = account_id) = 0
		OR (money_amount <= 0) 
    THEN ROLLBACK;
	
    ELSE
		UPDATE accounts AS a
		SET a.balance = a.balance + money_amount
		WHERE a.id = account_id;
	END IF;
END$$
DELIMITER ;

CALL usp_deposit_money(1, 10);

#13
DELIMITER $$
CREATE PROCEDURE `usp_withdraw_money`(account_id INT, money_amount DECIMAL(19,4))
BEGIN
	START TRANSACTION;
	IF ((SELECT COUNT(*) FROM accounts WHERE id = account_id) = 0
		OR (money_amount <= 0) 
        OR (SELECT balance FROM accounts WHERE id = account_id) <= money_amount)
    THEN ROLLBACK;
	
    ELSE
		UPDATE accounts
		SET balance = balance - money_amount
		WHERE id = account_id;
	END IF;
END$$
DELIMITER ;

CALL usp_withdraw_money(1, 10);

#14
DELIMITER $$
CREATE PROCEDURE `usp_transfer_money`(from_account_id INT, to_account_id INT, money_amount DECIMAL(19,4))
BEGIN
	START TRANSACTION;
	IF ((SELECT COUNT(*) FROM accounts WHERE id = from_account_id) = 0
		OR (SELECT COUNT(*) FROM accounts WHERE id = to_account_id) = 0
        OR from_account_id = to_account_id
		OR (money_amount <= 0) 
        OR (SELECT balance FROM accounts WHERE id = from_account_id) <= money_amount)
    THEN ROLLBACK;
	
    ELSE
		UPDATE accounts
		SET balance = balance - money_amount
		WHERE id = from_account_id;
        UPDATE accounts
		SET balance = balance + money_amount
		WHERE id = to_account_id;
	END IF;
END$$
DELIMITER ;

CALL usp_transfer_money(1, 2, 10);

#15
